// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918212527_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Models.AnalyzeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyzeRequests");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequestNews", b =>
                {
                    b.Property<int>("AnalyzeId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("AnalyzeId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("AnalyzeRequestNews");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequestPortfolio", b =>
                {
                    b.Property<int>("AnalyzeId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.HasKey("AnalyzeId", "PortfolioId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("AnalyzeRequestPortfolios");
                });

            modelBuilder.Entity("Api.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UrlToImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Api.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequest", b =>
                {
                    b.HasOne("Api.Models.User", "User")
                        .WithMany("AnalyzeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequestNews", b =>
                {
                    b.HasOne("Api.Models.AnalyzeRequest", "AnalyzeRequest")
                        .WithMany("AnalyzeRequestNews")
                        .HasForeignKey("AnalyzeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.News", "News")
                        .WithMany("AnalyzeRequestNews")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalyzeRequest");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequestPortfolio", b =>
                {
                    b.HasOne("Api.Models.AnalyzeRequest", "AnalyzeRequest")
                        .WithMany("AnalyzeRequestPortfolios")
                        .HasForeignKey("AnalyzeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Portfolio", "Portfolio")
                        .WithMany("AnalyzeRequestPortfolios")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalyzeRequest");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Api.Models.Portfolio", b =>
                {
                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.AnalyzeRequest", b =>
                {
                    b.Navigation("AnalyzeRequestNews");

                    b.Navigation("AnalyzeRequestPortfolios");
                });

            modelBuilder.Entity("Api.Models.News", b =>
                {
                    b.Navigation("AnalyzeRequestNews");
                });

            modelBuilder.Entity("Api.Models.Portfolio", b =>
                {
                    b.Navigation("AnalyzeRequestPortfolios");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Navigation("AnalyzeRequests");

                    b.Navigation("Portfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
